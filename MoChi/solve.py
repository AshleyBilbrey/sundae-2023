#!/usr/bin/env python3

# chances are people are just gonna use online tools: https://node-security.com/posts/xor-encryption-cracker/

import string
from collections import Counter
from binascii import unhexlify

eng_freq = {
    'e': 12.0, 't': 9.10, 'a': 8.12, 'o': 7.68, 'i': 7.31,
    'n': 6.95, 's': 6.28, 'r': 6.02, 'h': 5.92, 'd': 4.32,
    'l': 3.98, 'u': 2.88, 'c': 2.71, 'm': 2.61, 'f': 2.30,
    'y': 2.11, 'w': 2.09, 'g': 2.03, 'p': 1.82, 'b': 1.49,
    'v': 1.11, 'k': 0.69, 'x': 0.17, 'q': 0.11, 'j': 0.10, 'z': 0.07,
}

for i in eng_freq:
    eng_freq[i] /= 100


def score(src: bytes) -> float:
    if len(src) == 0:
        return float('inf')
    chi = 0
    m = src

    # unprintable text cannot be English
    for ch in m:
        if ch not in string.printable.encode('ascii'):
            return float('inf')

    # removing non-latin characters
    nonlatin = string.whitespace + string.punctuation + string.digits
    m = src.translate(None, nonlatin.encode('ascii'))
    if len(m) == 0:
        return float('inf')

    # calculate letter frequency in message
    dist = Counter(m.lower())

    # calculate chi squared score
    for a in eng_freq:
        observed = dist[ord(a)] / len(m)
        expected = eng_freq[a]
        chi += (observed - expected) ** 2 / expected

    # scale score based on how many non-English characters were removed
    ratio = len(m) / len(src)
    return chi / ratio


def solve_simple_xor(c: bytes) -> tuple:
    # (cipher, key, message, score)
    res = (c, b'', b'', float('inf'))
    for k in range(256):
        try:
            m = bytes([i ^ k for i in c])
            s = score(m)
            if s < res[3]:
                res = (c, bytes([k]), m, s)
        except Exception as e:
            print(e)
    return res


# transpose a list of bytes like a matrix
def transpose(blocks: list[bytes]) -> list[bytes]:
    transposed = []
    for i in range(len(blocks[0])):
        row = bytearray()
        for block in blocks:
            try:
                row.append(block[i])
            except IndexError:
                break
        transposed.append(bytes(row))
    return transposed


# c = ciphertext
# ks = keysize
# returns key
def solve(c: bytes, ks: int) -> bytes:
    # split cipher into key-sized chunks
    blocks = [c[i:i + ks] for i in range(0, len(c), ks)]
    blocks = transpose(blocks)
    key = b''.join([solve_simple_xor(b)[1] for b in blocks])
    return key


ciphertext = b'20000c131e141b1242084d7a02185013081c0a5b055d1104420a0c5b06485c1c090a4f1411141f0e010104570c0554514d0e4f081f5b00154f0e1f510a0611170c1f00151e571341050518440a065e081e4f1d1214515e410307091010075c181906021e04141d150a0c1f100a06560f080b061e19400141111c0e584309425d1a0e1b1e05185212170e0c424f485013094f0c14055a0115031b0e584d486515084f1c0f12551f0406491f59000d11141e4f1f14025a16040649045e1707110d0c1c1b1e57551c054204025c070d555d04011b1457401a04420d08430a1a54194d1c071a07515c412b074d7a02185013414f060f575d0141161b0c540a1c5812030e03170e141f00060c4d590d48505d0e0a1d1e1a5b1c18420a0c5c0f0d555d00000c131e4001140900431034005811084f0a1a03511c411b0c0c424e1a5e08030b435b1a5b11090b490443430911091f0e0b12035d1d0f03054d560c07555d0b001d5b035c174128081d510d0d42184d210a0c576d170010454d510d0c11141e4f0c141a591d0f0e104d430c04555d0c010b5b125506040c49094511015f1a4d1b071a031406080f0c43102e075215044f06085755520c1705195900075c0d02010a150314140e0d0d4d530c0642141e1b061510141d074219025c1a1b501e0e070e091e5017124e4901591301550e414f1f09184017080c454d510d0c110a0c1b0a0959143f0e010104100b09425d0c4f071e0351000e050c03550c1d425d1e1b1d0e144007130749025643095c0401001f1e14401b0f420e085c4f4842090c1d0c13575300000b071e1c43095f194d0e060957560703000508434d486515084f1d1214515214110c09100507435d00000c131e141a0011490c100d0d5611040806191b5152000f10015f100d111e02011b1e194052000c0d4d514300581a054f0e160e581d11070a19590d485d181b0a03575744000e061c0e590d0f111c4d080a175a581b0a07490e5f0d1b580e190a01180e1a52350a0c4d401107451804014f18185a06040c1d4d5f05484515084f051a075b1c0801084d420a0b545d181c0a1f57401d410f08065543055e1e05064f1204141a0805010842431c591c034f1b131640520e04491e440206551c1f0b4f081f5b00154f0e1f510a06110f040c0a5557791d020a004d59104842140006031a0514060e420d0c5e04071d5d1a0706181f141b1242040c540648461419074f091e57174104050245114858131e1b0a1a13141d07421902450d0c54194d1d061812141513030003434d4879141e1b00090e14200406491f59000d110a0c1c4f0f1f51520e10000a590d095d5d1b0e1d12165a0641171a085443015f5d19070a5b07461d05170a19590c0611120b4f0214145c1b4f423d0555430b4411191a1d1a1b140108050704560a0b50130e0a4f1411141f0e010104100a0611370c1f0e15575d014117070441160d1d5d1907000e105c5208164905511048541108020a15034752080c490e5f0e055e134d18060f1f141d150a0c1f10021d420d040c0614024752070d06094343015f5d021b071e051433120b08031000074413191d061e041a5220010a024207015f1a4d1b005b16461109030c025c0c0f581e0c034f0912471700100a051c431c59184d0700161259130507491d420c0c441e19060015575b14410f060e580a4858130e1d0a1a04511641000c0a590d0658130a4f061557401a04425f1958430b5413191a1d02571c390e041c0310130d4314020b465757431a040c490851111c591803180e091214011507080055111b111f080c0e161214020e121c0151114858134d0a191e054d52090d1c1e550b075d19414f021a1e5a1e184200031006094209081d015b3d5502000c474d790d484515084f2d0e19531d410c064d5b1606585d0b1a0b141c5d5e41010600400a0454194d06015b035c17410e081955435045154d0c0a1503410018420003101700545d230e1d1a574417130b06091c4309111108080a151314110e0c0a08420d015f1a4d0200181f5d5216031a4d54061b520f040d0a1f5914330201061f540a06565d19004f0f1f5152030d06061c431f5918034f0e5b055d110942040c5e43055019084f0e5b11581315420402530b01111b1f00025b1b5114150d1f0842431a581e084f0e15131401090d1d4d510d48500f1f00185b1640520816454d440b0d1110020c0712574000000c1a0b5f110554194d06010f1814134115010444064853141f0b4f1a195052070e0c1a10021f5004414f0e1513141307160c1f1017005009414f1b1312141f000c4e1e10110152184d09061e1b505203070a0c5d064855181e00031a035152000c0d4d52021a431803414f2f1f5d01410e0c0a550d0c110e0500180857401a0016491f5f1606555d1a07060f12141f0e010104101409425d05061c0f18461b020305014943005411094f1b14575c131707491e400a1a5809180e035b075b050410474d790d484515084f271e1e551c41120c1f590c0c1d5d00000c131e14050011490256170d5f5d181c0a1f575d1c413101045e170711181b0a010f0414060e420a085c060a431c190a4f181f5d1e0500001f440b485013094f021a05461b00050c4310220b52121f0b06151014060e421d055543075a1c0a0e021257571d0c12000155074858134d1b071e570540150a490e550d1c440f14434f1e1a4417130d1b1e100206555d03000d121b5d0608071a4d45100d555d19004f0b0240520c0d0a055943015f09024f1b1312141f0e171d05434307575d0f0e0d12124752150a081910140d43184d5a5f5b13550b12420601544d4878134d1b071204140204100002544f4858094d0d0a1816591741011c1e440c05500f144f061557401a0442081f59101c5e1e1f0e1b121414010e010008441a4857121f4f1b13121410130b0d08100206555d0a1d00141a14060e420c0c4443055e1e05064f0f185317150a0c1f10021c1109050a4f19055d1604451a4d580c1d42184d1b07091251520503101e10020e45181f4f1b1312140504060d045e04461129050a4f1d1e460115421b08530c1a5518094f0e18145b070f161a4d5f05485c120e07065b15511b0f05491843060c111c1e4f0e5b0755001542060b102d0d465d340a0e0950475207071a195915014514081c4f1a05515207100600101700545d250a061a19140204100002544d486515084f01141558171242060b101700545d24021f1e055d130d420a0245111c111f0803061e0151164116010c4443045e130a4f1c0f05551c0511490256430e43181e070302575913050749005f0000585d1e16021918581b1b070d4d5c0c06565d0106091e57551c05421e085c0f4553180401085757431a080e0c4d54110154194d0200181f5d520907051d55074842091f0a011c035c170f42060355441b1109080a1b13591433020106185e171b11120b4f060f5757130f420801430c4853184d09000e195052080c4939580648651c010a4f14111435040c03041e433c59184d0c1a08035b1f410d0f4d5b020f5010044f0214145c1b414a0404421107435d00000c131e1d5203070e0c5e43095c1203084f0f1f515212030418420201111e010e1c08575007130b070a101700545d201a1d141a5511090b491d5511015e19434f241a10551f08420402530b01111c1f0a4f181859020e110c09100c0e11091a004f08075c1713071a4d5f05485c120e07065b04401302090c09100c061109021f4f1411141d0f07490c5e0c1c59181f434f0f1844020406491a591700111c4d0d060f035100410d1b0c5e040d1155090e061f165d5b4f42200310140d5d1e020206151014060907492355144868180c1d435b04551f1410080410070d52121f0e1b1e131419000508005943055e1e05064f0c1e401a4128081d510d0d42184d0e1d1618410041030709102909411c030a1c1e5747050e100d1e100206555d1a001a171314020d030a0810170054104d06015b035c17411606065f0d075c1c4d470e17145b0404420003100248450f0c0b060f1e5b1c000e49275113095f181e0a4f09185b1f41150108420648500f194f000957521e0e150c1f43430943184d0b060807581318070d44101707110d1f0e165b115b004116010810131a5e0e1d0a1d12034d520e044919580601435d0b0e02121b5d1712420003101700545d230a185b2e5113134c493a580606110d08001f17121413150749065104095c144d0200181f5d5200041d0842431c59184d210a0c576d170010491d5511015e19414f1b13124d520014060454060c111e181b1b121953520816491a591700111c4d0700181f5b5249090704560641110e024f0e08575a1d15421d021015015e110c1b0a5b035c1741090800594f485013094f1c1616471a0406490444431f5809054f0e5b005b1d0507074d5802055c181f4f0e1d035100410b1d4d5e021c440f0c03030257500008070d4d510d0c111e1f0e0c1012505c412f060e580a485212031b06150251014116064d5206485e13084f001d57401a04421d1f510701451402010e1757521d0e061a4d55021c54134d0e1d14025a164128081d510d0d42184d210a0c576d170010490c5e0748580e4d1c00171314130f06490e5f0d1b4410080b4f1219141303170709510d0b545d0c1d000e195052150a001e1017015c18434f2e5b1c5515000f004d5d0c0b59144d061c5b07581302070d4d5f0d48571c0006030257551e15031b1e104b035010040b0e15161d520e0c492955000d5c1f081d4f494f14170001014d4906094353'
print(solve(unhexlify(ciphertext), 16))